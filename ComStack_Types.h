/*
 * File: ComStack_Types.h
 * Created by: Ahmed Nasr
 * Date: 28/2/2020
 */

#ifndef COMSTACK_TYPES_H
#define COMSTACK_TYPES_H

/* Id for our team in the AUTOSAR, for example ID = 88) */
#define COMSTACK_TYPES_VENDOR_ID                  (88U)

#define COMSTACK_TYPES_SW_MAJOR_VERSION   (1U)
#define COMSTACK_TYPES_SW_MINOR_VERSION   (0U)
#define COMSTACK_TYPES_SW_PATCH_VERSION   (0U)

#define COMSTACK_TYPES_AR_MAJOR_VERSION   (4U)
#define COMSTACK_TYPES_AR_MINOR_VERSION   (3U)
#define COMSTACK_TYPES_AR_PATCH_VERSION   (1U)

/* Standard AUTOSAR types */
#include "Std_Types.h"

/* AUTOSAR checking between Std Types and Com Stack Types Modules */
#if ((COMSTACK_TYPES_AR_MAJOR_VERSION != STD_TYPES_AR_MAJOR_VERSION)\
 ||  (COMSTACK_TYPES_AR_MINOR_VERSION != STD_TYPES_AR_MINOR_VERSION)\
 ||  (COMSTACK_TYPES_AR_PATCH_VERSION != STD_TYPES_AR_PATCH_VERSION))
  #error "The AR version of Std_Types.h does not match the expected version"
#endif

/* Configuration of Communication Stack */
#include "ComStack_Cfg.h"

/* AUTOSAR checking between Com Stack Cfg and Com Stack Types Modules */
#if ((COMSTACK_TYPES_AR_MAJOR_VERSION != COMSTACK_CFG_AR_MAJOR_VERSION)\
 ||  (COMSTACK_TYPES_AR_MINOR_VERSION != COMSTACK_CFG_AR_MINOR_VERSION)\
 ||  (COMSTACK_TYPES_AR_PATCH_VERSION != COMSTACK_CFG_AR_PATCH_VERSION))
  #error "The AR version of ComStack_Cfg.h does not match the expected version"
#endif

/* Software version checking between Com Stack Cfg and Com Stack Types Modules */
#if ((COMSTACK_TYPES_SW_MAJOR_VERSION != COMSTACK_CFG_SW_MAJOR_VERSION)\
 ||  (COMSTACK_TYPES_SW_MINOR_VERSION != COMSTACK_CFG_SW_MINOR_VERSION)\
 ||  (COMSTACK_TYPES_SW_PATCH_VERSION != COMSTACK_CFG_SW_PATCH_VERSION))
  #error "The SW version of COMSTACK_CFG.h does not match the expected version"
#endif

/* --------------------------------------------------------------- */

/* Zero-based integer number The size of this global type depends on
 * the maximum number of PDUs used within one software module.
 * This parameter shall be generated by the generator tool depending on
 * the value configured in EcuC virtual layer.
 * This parameter shall be generated in ComStack_Cfg.h file Example: 
 * If '''no''' software module deals with more PDUs that 256,
 * this type can be set to uint8.
 * If at least one software module handles more than 256 PDUs,
 * this type must globally be set to uint16.
 *
 * Descreption:
 * This type is used within the entire AUTOSAR Com Stack except for bus drivers.
 */
typedef uint16 PduIdType;

/* Zero-based integer number The size of this global type
 * depends on the maximum length of PDUs to be sent by an ECU.
 * This parameter shall be generated by the generator tool depending on the value configured in EcuC virtual layer.
 * This parameter shall be generated in ComStack_Cfg.h file Example:
 * If no segmentation is used the length depends on the maximum payload size of a frame
 * of the underlying communication system (for FlexRay maximum size is 255, therefore uint8).
 * If segmentation is used it depends on the maximum length of a segmented N-PDU (in general uint16 is used)
 *
 * Descreption:
 * This type shall be used within the entire AUTOSAR Com Stack of an ECU except for bus drivers.
 */
typedef uint16 PduLengthType;

/* Variables of this type shall be used to store the basic information about a PDU of any type,
 * namely a pointer variable pointing to its SDU (payload),
 * a pointer to Meta Data of the PDU, and the corresponding length of the SDU in bytes.
 */
typedef struct
{
	/* Pointer to the SDU (i.e. payload data) of the PDU.
	 * The type of this pointer depends on the memory model being used at compile time.
	 */
	uint8* SduDataPtr;
	
	/* Pointer to the meta data (e.g. CAN ID, socket ID,
	 * diagnostic addresses) of the PDU, consisting of a sequence of meta data items.
	 * The length and type of the meta data items is statically configured for each PDU.
	 * Meta data items with more than 8 bits use platform byte order.
	 */
	uint8* MetaDataPtr;
	
	/* Length of the SDU in bytes. */
	PduLengthType SduLength;
} PduInfoType;

/* Used to store the identifier of a partial network cluster. */
typedef uint8 PNCHandleType;

/* Specify the parameter to which the value has to be changed (BS or STmin). */
typedef enum
{
	/* Separation Time */
	TP_STMIN,
	
	/* Block Size */
	TP_BS,
	
	/* The Band width control parameter used in FlexRay transport protocol module. */
	TP_BC
} TPParameterType;

/* Variables of this type shall be used to store the result of a buffer request. */
typedef enum
{
	/* Buffer request accomplished successful.
	 * This status shall have the value 0.
	 */
	BUFREQ_OK,
	
	/* Buffer request not successful. Buffer cannot be accessed.
	 * This status shall have the value 1.
	 */
	BUFREQ_E_NOT_OK,
	
	/* Temporarily no buffer available. It's up the requester to retry request for a certain time.
	 * This status shall have the value 2.
	 */
	BUFREQ_E_BUSY,
	
	/* No Buffer of the required length can be provided.
	 * This status shall have the value 3.
	 */
	BUFREQ_E_OVFL
} BufReq_ReturnType;

/* Variables of this type shall be used to store the state of TP buffer. */
typedef enum
{
	/* TP_DATACONF indicates that all data, that have been copied so far,
	 * are confirmed and can be removed from the TP buffer.
	 * Data copied by this API call are excluded and will be confirmed later.
	 */
	TP_DATACONF,
	
	/* TP_DATARETRY indicates that this API call shall copyalready copied data in order to recover from an error.
	 * In this case TxTpDataCnt specifies the offset of the first byte to be copied by the API call.
	 */
	TP_DATARETRY,
	
	/* TP_CONFPENDING indicates that the previously copied data must remain in the TP.*/
	TP_CONFPENDING
} TpDataStateType;

/* Variables of this type shall be used to store the information about Tp buffer handling. */
typedef struct
{
	/* The enum type to be used to store the state of Tp buffer. */
	TpDataStateType TpDataState;
	
	/* Offset from the current position which identifies the number
	 * of bytes to be retransmitted.
	 */
	PduLengthType TxTpDataCnt;
} RetryInfoType;

/* Variables of the type NetworkHandleType shall be used to store
 * the identifier of a communication channel.
 */
typedef uint8 NetworkHandleType;

/* IcomConfigIdType defines the configuration ID.
 * An ID of 0 is the default configuration.
 * An ID greater than 0 shall identify a configuration for Pretended Networking.
 * There is more than 1 configuration possible.
 */
typedef uint8 IcomConfigIdType;

/* IcomSwitch_ErrorType defines the errors which can occur when
 * activating or deactivating Pretended Networking.
 */
typedef enum
{
	/* The activation of Pretended Networking was successful. */
	ICOM_SWITCH_E_OK,
	
	/* The activation of Pretended Networking was not successful */
	ICOM_SWITCH_E_FAILED
} IcomSwitch_ErrorType;

#endif